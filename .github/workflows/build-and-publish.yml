name: Build and Publish

on:
  push:
    paths-ignore:
      - 'tests/**'
    branches:
      - main
  pull_request:
    paths-ignore:
      - 'tests/**'
    branches:
      - main
  workflow_dispatch:

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript type checking (production code only)
        run: npm run typecheck:ci
        
      - name: Run ESLint
        run: npm run lint

  build-docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      sha_version: ${{ steps.vars.outputs.sha_short }}
      commit_msg: ${{ steps.vars.outputs.commit_msg }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "commit_msg=$(git log -1 --pretty=format:\"%s\")" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate container version
        id: docker_build_version
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: echo "version=$(date +'%Y-%m-%d').$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

      - name: Build container image and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          load: false
          target: runner
          cache-from: |
            type=gha,scope=build-deps
            type=gha,scope=builder
            type=gha,scope=runner
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/pathology:buildcache-build-deps
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/pathology:buildcache-builder
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/pathology:buildcache
          cache-to: |
            type=gha,mode=max,scope=build-deps
            type=gha,mode=max,scope=builder
            type=gha,mode=max,scope=runner
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/pathology:buildcache-build-deps,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/pathology:buildcache-builder,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/pathology:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_APP_DOMAIN=${{ secrets.NEXT_PUBLIC_APP_DOMAIN }}
            NEXT_PUBLIC_GROWTHBOOK_API_HOST=${{ secrets.NEXT_PUBLIC_GROWTHBOOK_API_HOST }}
            NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY }}
            NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
            NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pathology:latest 
            ${{ secrets.DOCKERHUB_USERNAME }}/pathology:${{ steps.vars.outputs.sha_short }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pathology-socket:latest 
            ${{ secrets.DOCKERHUB_USERNAME }}/pathology-socket:${{ steps.vars.outputs.sha_short }}
          push: ${{ github.ref == 'refs/heads/main' }}

  validate-and-deploy:
    name: Validate and Deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-docker-image]
    steps:
      - name: Deployment Check
        run: |
          echo "Lint and type check status: ${{ needs.lint-and-typecheck.result }}"
          echo "Build status: ${{ needs.build-docker-image.result }}"
          if [ "${{ needs.lint-and-typecheck.result }}" != "success" ]; then
            echo "❌ Lint and type check failed - blocking deployment"
            exit 1
          fi
          if [ "${{ needs.build-docker-image.result }}" != "success" ]; then
            echo "❌ Build failed - blocking deployment"
            exit 1
          fi
          echo "✅ All checks passed - proceeding with deployment"

  config:
    name: Config
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: validate-and-deploy
    outputs:
      get-server-ip-list: ${{ steps.get-server-ip-list.outputs.get-server-ip-list }}
    steps:
      - id: get-server-ip-list
        name: Get Server IP List
        run: echo "get-server-ip-list=$(dig +short app-servers.thinky.gg TXT | jq -cr 'split(",")')" >> $GITHUB_OUTPUT
      - name: print output
        run: |
          echo "${{ steps.get-server-ip-list.outputs.get-server-ip-list }}"

  deploy-to-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-docker-image, config]
    strategy:
      matrix:
        server: ${{ fromJson(needs.config.outputs.get-server-ip-list) }}
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/pathology
          chmod 600 ~/.ssh/pathology
          cat >>~/.ssh/config <<END
          Host *
            User $SSH_USER
            IdentityFile ~/.ssh/pathology
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SERVER_SSH_USER }}
          SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}

      - name: Update Environments with New Containers
        run: ssh ${{ matrix.server }} 'bash /opt/pathology/scripts/update-Environments.sh -e stage -v ${{ needs.build-docker-image.outputs.sha_version }}'